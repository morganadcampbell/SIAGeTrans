***Starting server on port 60477 ***
Loading net-file from 'sumo_simulation/sumo_elements/test.net.xml' ... done (6ms).
Loading additional-files from 'sumo_simulation/sumo_elements/test.add.xml' ... done (31ms).
Warning: Unused states in tlLogic 'J4', program '0' in phase 0 after tl-index 15
Warning: Missing yellow phase in tlLogic 'J4', program '0' for tl-index 1 when switching to phase 1.
Warning: Missing yellow phase in tlLogic 'J4', program '0' for tl-index 4 when switching to phase 4.
Warning: Missing green phase in tlLogic 'J4', program '0' for tl-index 16.
Loading route-files incrementally from 'sumo_simulation/sumo_elements/test.rou.xml'
Loading done.
Simulation version 1.23.1 started with time: 0.00.
Warning: Vehicle 'f_6.295' performs emergency braking on lane 'E4_2' with decel=9.00, wished=4.50, severity=1.00, time=7825.00.
Warning: Vehicle 'f_6.295' performs emergency stop at the end of lane 'E4_2' because of a red traffic light (decel=-10.90, offset=0.09), time=7825.00.
Simulation ended at time: 10147.00.
Reason: TraCI requested termination.
Performance:
 Duration: 39.96s
 TraCI-Duration: 34.85s
 Real time factor: 253.91
 UPS: 4331.481620
 UPS-Persons: 5865.900958
Vehicles:
 Inserted: 3140
 Running: 0
 Waiting: 0
 Emergency Stops: 1
 Emergency Braking: 1
Persons:
 Inserted: 1518
 Running: 0
Statistics (avg of 3140):
 RouteLength: 189.93
 Speed: 4.77
 Duration: 55.13
 WaitingTime: 25.76
 TimeLoss: 35.71
 DepartDelay: 0.25
Pedestrian Statistics (avg of 1518 walks):
 RouteLength: 155.69
 Duration: 154.43
 TimeLoss: 41.39
DijkstraRouter answered 47228 queries and explored 23.64 edges on average.
DijkstraRouter spent 0.23s answering queries (0.00ms on average).
DijkstraRouter answered 1518 queries and explored 32.00 edges on average.
DijkstraRouter spent 0.01s answering queries (0.01ms on average).

-----------------------------------------------------------
**** Adding simulation parameters from Sumo Controller ****
t.get('RunAdaptation')= 1
t.get('MinimumTime')= 15
t.get('MaximumTime')= 45
t.get('CurrentTemperature')= 10
t.get('MaxTemperature')= 30
t.get('MinTemperature')= 10
t.get('EmergencyVehiclePriorization')= 1
t.get('FloodingPriorization')= 0
t.get('WeatherPriorization')= 0                        
t.get('personPerCarFactor')= 1.54
t.get('MaximumVehicleSpeed')= 16.67
t.get('floodedVehicleSpeed')= 4.17
t.get('floodedLanes')= ['E1_2', 'E1_1', 'E3_2']
defaultVehicleFlowProbability= 0.04
emrgVehicleFlowProbability= 0.001
pedestrianFlowProbability= 0.04                        
adaptationInterval= 600
numberOfPhases= 3
fixedPhaseTime= 30
waitingTime= 5
cicleFullTime= 105
edges= ['E1', 'E2', 'E3', 'E4']
crosswalk= [':J4_c0', ':J4_c1', ':J4_c2', ':J4_c3']
entrySensors= ['e2_r1_in_1', 'e2_r1_in_2', 'e2_r2_in_1', 'e2_r2_in_2', 'e2_r3_in_1', 'e2_r3_in_2', 'e2_r4_in_1', 'e2_r4_in_2']
exitSensors= ['e2_r1_out_1', 'e2_r1_out_2', 'e2_r2_out_1', 'e2_r2_out_2', 'e2_r3_out_1', 'e2_r3_out_2', 'e2_r4_out_1', 'e2_r4_out_2']
entrySensorsPerPhase= [['e2_r4_in_2', 'e2_r2_in_2'], ['e2_r1_in_2', 'e2_r3_in_2'], ['e2_r1_in_1', 'e2_r2_in_1', 'e2_r3_in_1', 'e2_r4_in_1']]
exitSensorsPerPhase= [['e2_r4_out_1', 'e2_r2_out_2'], ['e2_r1_out_2', 'e2_r3_out_2'], ['e2_r1_out_1', 'e2_r2_out_1'], ['e2_r3_out_1', 'e2_r4_out_2']]                        
lanePerPhase= [['E2_2', 'E4_2'], ['E1_2', 'E3_2'], ['E1_1', 'E2_1', 'E3_1', 'E4_1']]
crosswalkPerPhase= [[':J4_c1', ':J4_c3'], [':J4_c0', ':J4_c2'], []]
PeopleEdgePerPhase= [['E2', 'E4'], ['E1', 'E3'], []]
trafficLightTimes= [[15, 30, 45], [15, 30, 45], [15, 30, 45], [15, 30, 45], [15, 30, 45], [15, 30, 45], [15, 30, 45], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [29, 28, 33], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [24, 31, 35], [27, 45, 18], [27, 45, 18], [27, 45, 18], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [24, 28, 38], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [33, 21, 36], [23, 29, 38], [23, 29, 38], [23, 29, 38], [23, 29, 38], [23, 29, 38], [23, 29, 38], [23, 29, 38], [23, 29, 38], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 23, 34], [33, 15, 42], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [32, 32, 26], [32, 32, 26], [32, 32, 26], [32, 30, 28], [32, 30, 28], [32, 30, 28], [32, 30, 28], [32, 30, 28], [32, 30, 28], [32, 30, 28], [32, 30, 28], [36, 15, 39], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [27, 25, 38], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [23, 33, 34], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [45, 22, 23], [45, 22, 23], [45, 22, 23], [45, 22, 23], [45, 22, 23], [45, 22, 23], [45, 22, 23], [45, 22, 23], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [17, 45, 28], [31, 31, 28], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [23, 22, 45], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [24, 45, 21], [26, 29, 35], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [45, 19, 26], [45, 19, 26], [45, 19, 26], [37, 37, 16], [37, 37, 16], [37, 37, 16], [37, 37, 16], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [18, 45, 27], [30, 45, 15], [30, 45, 15], [30, 45, 15], [31, 22, 37], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [15, 33, 42], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [45, 18, 27], [45, 18, 27], [45, 18, 27], [45, 18, 27], [45, 18, 27], [45, 29, 16], [45, 29, 16], [25, 45, 20], [25, 45, 20], [25, 45, 20], [25, 45, 20], [15, 43, 32], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [45, 23, 22], [45, 23, 22], [45, 23, 22], [45, 23, 22], [45, 23, 22], [45, 23, 22], [45, 23, 22], [45, 23, 22], [30, 45, 15], [30, 45, 15], [30, 45, 15], [30, 45, 15], [30, 45, 15], [30, 45, 15], [37, 18, 35], [17, 43, 30], [16, 45, 29], [16, 45, 29], [16, 45, 29], [16, 45, 29], [16, 37, 37], [45, 29, 16], [45, 29, 16], [45, 29, 16], [45, 29, 16], [45, 29, 16], [45, 29, 16], [45, 29, 16], [17, 45, 28], [17, 45, 28], [17, 45, 28], [45, 30, 15], [45, 30, 15], [45, 30, 15], [45, 30, 15], [45, 30, 15], [45, 30, 15], [45, 30, 15], [25, 32, 33], [45, 22, 23], [19, 26, 45], [21, 24, 45], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [15, 45, 30], [21, 24, 45], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [45, 15, 30], [22, 37, 31], [44, 16, 30], [29, 45, 16], [29, 45, 16], [29, 45, 16], [29, 45, 16], [29, 45, 16], [29, 45, 16], [29, 45, 16], [29, 45, 16]]
t.get('trafficImbalanceFrequency')= 20
t.get('trafficImbalanceFactor')= 0                        
WeightedTimeLoss= 37.56106054100473
WeightedDuration= 87.4909703735509
WeatherVariance= 100.0
WeatherVariationFactor= 1.0                        
timeLossMap= {'-E1_0': None, '-E1_1': '451.76', '-E1_2': '399.22', '-E2_0': None, '-E2_1': '325.15', '-E2_2': '534.77', '-E3_0': None, '-E3_1': '440.36', '-E3_2': '397.35', '-E4_0': None, '-E4_1': '332.64', '-E4_2': '467.05', 'E1_0': None, 'E1_1': '11832.17', 'E1_2': '17940.14', 'E2_0': None, 'E2_1': '9186.54', 'E2_2': '14972.78', 'E3_0': None, 'E3_1': '10360.31', 'E3_2': '16698.64', 'E4_0': None, 'E4_1': '10078.53', 'E4_2': '15518.52'}
waitingTimeMap= {'-E1_0': None, '-E1_1': '0.00', '-E1_2': '0.00', '-E2_0': None, '-E2_1': '0.00', '-E2_2': '0.00', '-E3_0': None, '-E3_1': '0.00', '-E3_2': '0.00', '-E4_0': None, '-E4_1': '0.00', '-E4_2': '0.00', 'E1_0': None, 'E1_1': '9275.00', 'E1_2': '14071.00', 'E2_0': None, 'E2_1': '6061.00', 'E2_2': '11913.00', 'E3_0': None, 'E3_1': '7274.00', 'E3_2': '13263.00', 'E4_0': None, 'E4_1': '6849.00', 'E4_2': '12070.00'}
floodedWaitingTimeMap= {'E1_1': '9275.00', 'E1_2': '14071.00', 'E3_2': '13263.00'}
totalWaitingTime= 80776.0
totalFloodedWaitingTime= 36609.0
adjustedFloodedWaitingTime= 0.45321630187184314                        
floodedTimeLossMap= {'E1_1': '11832.17', 'E1_2': '17940.14', 'E3_2': '16698.64'}
totalTimeLoss= 109935.93000000001
totalFloodedTimeLoss= 46470.95
adjustedFloodedTimeLoss= 0.42270939082427367                        
CO2EmissionAvg= 124346.06614593836
fuelUseAvg= 40305.781401141394
EmrgWaitingTimeAvg= 28.055555555555557
EmrgTimeLossAvg= 37.855277777777786
EmrgDurationAvg= 59.52777777777778